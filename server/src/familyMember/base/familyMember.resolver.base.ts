/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFamilyMemberArgs } from "./CreateFamilyMemberArgs";
import { UpdateFamilyMemberArgs } from "./UpdateFamilyMemberArgs";
import { DeleteFamilyMemberArgs } from "./DeleteFamilyMemberArgs";
import { FamilyMemberFindManyArgs } from "./FamilyMemberFindManyArgs";
import { FamilyMemberFindUniqueArgs } from "./FamilyMemberFindUniqueArgs";
import { FamilyMember } from "./FamilyMember";
import { User } from "../../user/base/User";
import { FamilyMemberService } from "../familyMember.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FamilyMember)
export class FamilyMemberResolverBase {
  constructor(
    protected readonly service: FamilyMemberService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  async _familyMembersMeta(
    @graphql.Args() args: FamilyMemberFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FamilyMember])
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "any",
  })
  async familyMembers(
    @graphql.Args() args: FamilyMemberFindManyArgs
  ): Promise<FamilyMember[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FamilyMember, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "read",
    possession: "own",
  })
  async familyMember(
    @graphql.Args() args: FamilyMemberFindUniqueArgs
  ): Promise<FamilyMember | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FamilyMember)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "create",
    possession: "any",
  })
  async createFamilyMember(
    @graphql.Args() args: CreateFamilyMemberArgs
  ): Promise<FamilyMember> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        familyId: args.data.familyId
          ? {
              connect: args.data.familyId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FamilyMember)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "update",
    possession: "any",
  })
  async updateFamilyMember(
    @graphql.Args() args: UpdateFamilyMemberArgs
  ): Promise<FamilyMember | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          familyId: args.data.familyId
            ? {
                connect: args.data.familyId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FamilyMember)
  @nestAccessControl.UseRoles({
    resource: "FamilyMember",
    action: "delete",
    possession: "any",
  })
  async deleteFamilyMember(
    @graphql.Args() args: DeleteFamilyMemberArgs
  ): Promise<FamilyMember | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async familyId(@graphql.Parent() parent: FamilyMember): Promise<User | null> {
    const result = await this.service.getFamilyId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
